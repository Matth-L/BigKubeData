import mysql.connector
from mysql.connector import Error

import os
import subprocess
from time import sleep
import socket 

from elasticsearch import Elasticsearch
from elasticsearch.exceptions import AuthenticationException
from elasticsearch.helpers import bulk 

# building random user for the database
from faker import Faker


mysql_host = "mysql.default.svc.cluster.local"

try:
    print(f"Resolving {mysql_host}...")
    ip = socket.gethostbyname(mysql_host)
    print(f"DNS resolution successful: {mysql_host} â†’ {ip}")
except socket.gaierror as e:
    print(f"DNS resolution failed: {e}")

def init_db():
    """
    we will use this function once, to put all the database in elastic search
    
    return : the database

    """
    db = mysql.connector.connect(
        host=mysql_host,
        user="root",
        password="password",
        database="data",
        port=3306
    )
    
    if db.is_connected():
        print("Successfully connected to the database.")

    cursor = db.cursor()
    cursor.execute("SELECT * FROM student")  
    results = cursor.fetchall()
    cursor.close()
    mydb.close()
    return results

def get_elastic_client(password):
    """
    connect using the http authentification and the password generated by ELASTIC 
    when creating the pod, changes everytime it is launched in a new pod

    return : elastic client
    """
    client = Elasticsearch(
    "https://quickstart-es-http.default.svc:9200",
    http_auth=("elastic", password),
    verify_certs=False
    ) 

    try:
        response = client.info()
    except AuthenticationException:
        print("Authentication failed. Please check your credentials.")
    except Exception as e:
        print(f"Error connecting to Elasticsearch: {e}")

    return client

def insert_to_elasticsearch(mysql_data):
    client = get_elastic_client() 

    # Index name where we will store data 
    index_name = "students_data"

    # Prepare the data for Elasticsearch
    actions = []
    for row in mysql_data:
        action = {
            "_op_type": "index",  # We use 'index' to add data
            "_index": index_name,  # Index name in Elasticsearch
            "_source": {
                "id": row[0],  
                "name": row[1], 
                "age": row[2],  
            }
        }
        actions.append(action)
    success, failed = bulk(client, actions, index=index_name)


mysql_data = init_db()  # Fetch data from MySQL
insert_to_elasticsearch(mysql_data)  # Insert data into Elasticsearch
